import disnake
from disnake.ext import commands
import os
from typing import Dict, Optional

class VoiceManager(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.voice_channels: Dict[int, dict] = {}
        self.main_voice_id = int(os.getenv('VOICE_CHANNEL_ID'))

    async def get_or_create_control_channel(self, category: disnake.CategoryChannel) -> disnake.TextChannel:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_channel = disnake.utils.get(category.text_channels, name="voice-control")
        
        if not control_channel:
            # –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            control_channel = await category.create_text_channel(
                name="voice-control",
                topic="–ö–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏",
                position=0
            )
            # –°–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –æ—Ç –≤—Å–µ—Ö
            await control_channel.set_permissions(category.guild.default_role, read_messages=False)
            
        return control_channel

    @commands.Cog.listener()
    async def on_voice_state_update(self, member: disnake.Member, before: disnake.VoiceState, after: disnake.VoiceState):
        if after.channel and after.channel.id == self.main_voice_id:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            channel = await member.guild.create_voice_channel(
                name=f"üîä –ö–æ–º–Ω–∞—Ç–∞ {member.display_name}",
                category=after.channel.category,
                user_limit=0
            )
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await member.move_to(channel)
            
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∞ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞
            await channel.set_permissions(member, 
                manage_channels=True, 
                mute_members=True, 
                deafen_members=True,
                view_channel=True,
                connect=True
            )
            
            # –°–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            await channel.set_permissions(channel.guild.default_role,
                view_channel=False,
                connect=False
            )
            
            # –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            text_channel = await channel.guild.create_text_channel(
                name=f"—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ-{channel.name}",
                category=channel.category
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            await text_channel.set_permissions(member, 
                view_channel=True,
                send_messages=True,
                read_message_history=True
            )
            await text_channel.set_permissions(channel.guild.default_role,
                view_channel=False
            )
            
            # –°–æ–∑–¥–∞—ë–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            embed = await self.create_control_panel(member, channel)
            control_msg = await text_channel.send(
                embed=embed,
                components=self.get_control_buttons()
            )
            
            self.voice_channels[channel.id] = {
                "owner": member.id,
                "panel_msg": control_msg.id,
                "text_channel": text_channel.id
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        elif after.channel and after.channel.id in self.voice_channels:
            await after.channel.set_permissions(member, view_channel=True, connect=True)
            text_channel = self.bot.get_channel(self.voice_channels[after.channel.id]["text_channel"])
            if text_channel:
                await text_channel.set_permissions(member, view_channel=True, read_message_history=True)

        # –û—á–∏—â–∞–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        if before.channel and before.channel.id in self.voice_channels:
            if member.id != self.voice_channels[before.channel.id]["owner"]:
                await before.channel.set_permissions(member, overwrite=None)
                text_channel = self.bot.get_channel(self.voice_channels[before.channel.id]["text_channel"])
                if text_channel:
                    await text_channel.set_permissions(member, overwrite=None)

            if len(before.channel.members) == 0:
                channel_info = self.voice_channels[before.channel.id]
                text_channel = self.bot.get_channel(channel_info["text_channel"])
                if text_channel:
                    await text_channel.delete()
                await before.channel.delete()
                del self.voice_channels[before.channel.id]

    def get_control_buttons(self):
        return [
            disnake.ui.Button(style=disnake.ButtonStyle.primary, label="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", custom_id="vc_rename", row=0),
            disnake.ui.Button(style=disnake.ButtonStyle.primary, label="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç", custom_id="vc_limit", row=0),
            disnake.ui.Button(style=disnake.ButtonStyle.danger, label="–ó–∞–º—É—Ç–∏—Ç—å –≤—Å–µ—Ö", custom_id="vc_muteall", row=1),
            disnake.ui.Button(style=disnake.ButtonStyle.success, label="–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞", custom_id="vc_transfer", row=1),
            # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
            disnake.ui.Button(style=disnake.ButtonStyle.secondary, label="–°–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", custom_id="vc_hide", row=2),
            disnake.ui.Button(style=disnake.ButtonStyle.secondary, label="–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª", custom_id="vc_unhide", row=2),
            disnake.ui.Button(style=disnake.ButtonStyle.danger, label="–ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", custom_id="vc_kick", row=3),
        ]

    async def create_control_panel(self, owner: disnake.Member, channel: disnake.VoiceChannel) -> disnake.Embed:
        embed = disnake.Embed(
            title="üéÆ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º",
            description=f"–í–ª–∞–¥–µ–ª–µ—Ü: {owner.mention}\n–ö–∞–Ω–∞–ª: {channel.name}",
            color=disnake.Color.blue()
        )
        embed.add_field(
            name="–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
            value="‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
                  "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                  "‚Ä¢ –ó–∞–º—É—Ç–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                  "‚Ä¢ –ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                  "‚Ä¢ –°–∫—Ä—ã—Ç—å/–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–Ω–∞–ª\n"
                  "‚Ä¢ –ö–∏–∫–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        return embed

    @commands.Cog.listener()
    async def on_button_click(self, inter: disnake.MessageInteraction):
        if not inter.component.custom_id.startswith("vc_"):
            return

        if not inter.author.voice or inter.author.voice.channel.id not in self.voice_channels:
            return await inter.response.send_message(
                "‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!", 
                ephemeral=True
            )

        channel_info = self.voice_channels[inter.author.voice.channel.id]
        if channel_info["owner"] != inter.author.id:
            return await inter.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º!", 
                ephemeral=True
            )

        if inter.component.custom_id == "vc_rename":
            await inter.response.send_modal(
                title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
                custom_id="vc_rename_modal",
                components=[
                    disnake.ui.TextInput(
                        label="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                        custom_id="new_name",
                        style=disnake.TextInputStyle.short,
                        max_length=32
                    )
                ]
            )

        elif inter.component.custom_id == "vc_limit":
            await inter.response.send_modal(
                title="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞",
                custom_id="vc_limit_modal",
                components=[
                    disnake.ui.TextInput(
                        label="–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (0-99)",
                        custom_id="user_limit",
                        style=disnake.TextInputStyle.short,
                        max_length=2
                    )
                ]
            )

        elif inter.component.custom_id == "vc_muteall":
            channel = inter.author.voice.channel
            for member in channel.members:
                if member.id != inter.author.id:
                    await member.edit(mute=True)
            await inter.response.send_message("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–º—É—á–µ–Ω—ã!", ephemeral=True)

        elif inter.component.custom_id == "vc_transfer":
            await inter.response.send_modal(
                title="–ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∞–≤",
                custom_id="vc_transfer_modal",
                components=[
                    disnake.ui.TextInput(
                        label="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        custom_id="new_owner",
                        style=disnake.TextInputStyle.short,
                        max_length=20
                    )
                ]
            )

        elif inter.component.custom_id == "vc_hide":
            channel = inter.author.voice.channel
            await channel.set_permissions(channel.guild.default_role, view_channel=False, connect=False)
            await inter.response.send_message("–ö–∞–Ω–∞–ª —Å–∫—Ä—ã—Ç –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", ephemeral=True)

        elif inter.component.custom_id == "vc_unhide":
            channel = inter.author.voice.channel
            await channel.set_permissions(channel.guild.default_role, view_channel=True, connect=True)
            await inter.response.send_message("–ö–∞–Ω–∞–ª —Ç–µ–ø–µ—Ä—å –≤–∏–¥–µ–Ω –≤—Å–µ–º", ephemeral=True)

        elif inter.component.custom_id == "vc_kick":
            await inter.response.send_modal(
                title="–ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                custom_id="vc_kick_modal",
                components=[
                    disnake.ui.TextInput(
                        label="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                        custom_id="user_id",
                        style=disnake.TextInputStyle.short,
                        max_length=20
                    )
                ]
            )

    @commands.Cog.listener()
    async def on_modal_submit(self, inter: disnake.ModalInteraction):
        if not inter.custom_id.startswith("vc_"):
            return

        channel = inter.author.voice.channel
        if not channel or channel.id not in self.voice_channels:
            return await inter.response.send_message(
                "–û—à–∏–±–∫–∞: –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                ephemeral=True
            )

        if inter.custom_id == "vc_rename_modal":
            new_name = inter.text_values["new_name"]
            await channel.edit(name=f"üîä {new_name}")
            await inter.response.send_message(f"–ö–∞–Ω–∞–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {new_name}", ephemeral=True)

        elif inter.custom_id == "vc_limit_modal":
            try:
                limit = int(inter.text_values["user_limit"])
                if 0 <= limit <= 99:
                    await channel.edit(user_limit=limit)
                    await inter.response.send_message(
                        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç: {limit} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                        ephemeral=True
                    )
                else:
                    raise ValueError()
            except:
                await inter.response.send_message(
                    "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99", 
                    ephemeral=True
                )

        elif inter.custom_id == "vc_transfer_modal":
            try:
                new_owner_id = int(inter.text_values["new_owner"])
                new_owner = await self.bot.fetch_user(new_owner_id)
                if new_owner and new_owner in channel.members:
                    old_owner = inter.author
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞
                    await channel.set_permissions(old_owner, overwrite=None)
                    await channel.set_permissions(
                        new_owner, 
                        manage_channels=True, 
                        mute_members=True, 
                        deafen_members=True
                    )
                    self.voice_channels[channel.id]["owner"] = new_owner_id
                    await inter.response.send_message(
                        f"–ü—Ä–∞–≤–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {new_owner.mention}", 
                        ephemeral=True
                    )
                else:
                    raise ValueError()
            except:
                await inter.response.send_message(
                    "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ", 
                    ephemeral=True
                )

        elif inter.custom_id == "vc_kick_modal":
            try:
                user_id = int(inter.text_values["user_id"])
                channel = inter.author.voice.channel
                member = channel.guild.get_member(user_id)
                channel_info = self.voice_channels[channel.id]
                
                if member and member in channel.members and member.id != channel_info["owner"]:
                    await member.move_to(None)
                    await channel.set_permissions(member, connect=False)
                    await inter.response.send_message(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} –∫–∏–∫–Ω—É—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞", 
                        ephemeral=True
                    )
                else:
                    raise ValueError()
            except:
                await inter.response.send_message(
                    "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ",
                    ephemeral=True
                )

def setup(bot):
    bot.add_cog(VoiceManager(bot))
