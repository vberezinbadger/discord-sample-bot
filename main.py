import os
from dotenv import load_dotenv
import disnake
from disnake.ext import commands
import json
from urllib.parse import urlparse
import aiohttp
import asyncio
from datetime import datetime
import random

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
intents = disnake.Intents.default()
intents.message_content = True
intents.members = True
intents.presences = True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = commands.Bot(
    command_prefix="!",
    intents=intents,
    test_guilds=[int(os.getenv('GUILD_ID'))]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
warnings = {}
try:
    with open('warnings.json', 'r') as f:
        warnings = json.load(f)
except FileNotFoundError:
    pass

# –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
levels = {}
try:
    with open('levels.json', 'r') as f:
        levels = json.load(f)
except FileNotFoundError:
    pass

# –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é aiohttp –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
@bot.event
async def on_ready():
    bot.session = aiohttp.ClientSession()
    print(f"–ë–æ—Ç {bot.user} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
@bot.event
async def on_shutdown():
    if hasattr(bot, 'session'):
        await bot.session.close()

# –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@bot.slash_command()
@commands.has_permissions(kick_members=True)
async def kick(inter, member: disnake.Member, *, reason=None):
    """–ö–∏–∫–Ω—É—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    await member.kick(reason=reason)
    await inter.response.send_message(f"–£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –±—ã–ª –∫–∏–∫–Ω—É—Ç. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

@bot.slash_command()
@commands.has_permissions(ban_members=True)
async def ban(inter, member: disnake.Member, *, reason=None):
    """–ó–∞–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    await member.ban(reason=reason)
    await inter.response.send_message(f"–£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

@bot.slash_command()
@commands.has_permissions(ban_members=True)
async def unban(inter, user_id: str):
    """–†–∞–∑–±–∞–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID"""
    try:
        user = await bot.fetch_user(int(user_id))
        await inter.guild.unban(user)
        await inter.response.send_message(f"–£—á–∞—Å—Ç–Ω–∏–∫ {user.mention} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    except:
        await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@bot.slash_command()
@commands.has_permissions(moderate_members=True)
async def mute(inter, member: disnake.Member, duration: int, *, reason=None):
    """–ó–∞–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (duration –≤ –º–∏–Ω—É—Ç–∞—Ö)"""
    await member.timeout(duration=duration*60, reason=reason)
    await inter.response.send_message(f"–£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç. –ü—Ä–∏—á–∏–Ω–∞: {reason}")

@bot.slash_command()
@commands.has_permissions(moderate_members=True)
async def unmute(inter, member: disnake.Member):
    """–†–∞–∑–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    await member.timeout(duration=0)
    await inter.response.send_message(f"–£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} —Ä–∞–∑–º—É—á–µ–Ω")

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
@bot.slash_command()
@commands.has_permissions(moderate_members=True)
async def warn(inter, member: disnake.Member, *, reason=None):
    """–í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É"""
    guild_id = str(inter.guild.id)
    member_id = str(member.id)
    
    if guild_id not in warnings:
        warnings[guild_id] = {}
    
    if member_id not in warnings[guild_id]:
        warnings[guild_id][member_id] = []
    
    warnings[guild_id][member_id].append(reason or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    with open('warnings.json', 'w') as f:
        json.dump(warnings, f)
    
    warn_count = len(warnings[guild_id][member_id])
    await inter.response.send_message(f"–£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ({warn_count}/3). –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    
    if warn_count >= 3:
        await member.kick(reason="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        await inter.channel.send(f"–£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –±—ã–ª –∫–∏–∫–Ω—É—Ç –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
        warnings[guild_id][member_id] = []

@bot.slash_command()
@commands.has_permissions(moderate_members=True)
async def clear_warnings(inter, member: disnake.Member):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    guild_id = str(inter.guild.id)
    member_id = str(member.id)
    
    if guild_id in warnings and member_id in warnings[guild_id]:
        warnings[guild_id][member_id] = []
        with open('warnings.json', 'w') as f:
            json.dump(warnings, f)
        await inter.response.send_message(f"–í—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.mention} –æ—á–∏—â–µ–Ω—ã")
    else:
        await inter.response.send_message(f"–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.mention} –Ω–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

# –ò–∑–º–µ–Ω—è–µ–º broadcast –∫–æ–º–∞–Ω–¥—É
@bot.slash_command()
@commands.has_permissions(administrator=True)
async def broadcast(inter, *, message: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞"""
    await inter.response.defer(ephemeral=True)
    await inter.channel.send(message)
    await inter.edit_original_response(content="–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

@bot.slash_command()
async def clear(inter, amount: int):
    """–û—á–∏—Å—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not inter.author.guild_permissions.manage_messages:
        return await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!", ephemeral=True)
    
    await inter.response.defer(ephemeral=True)
    deleted = await inter.channel.purge(limit=amount)
    await inter.edit_original_response(content=f"–£–¥–∞–ª–µ–Ω–æ {len(deleted)} —Å–æ–æ–±—â–µ–Ω–∏–π")

@bot.slash_command()
async def poll(inter, question: str, option1: str, option2: str):
    """–°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å —Å –¥–≤—É–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞"""
    await inter.response.defer()
    
    embed = disnake.Embed(title="üìä –û–ø—Ä–æ—Å", description=question, color=disnake.Color.blue())
    embed.add_field(name="1Ô∏è‚É£", value=option1, inline=True)
    embed.add_field(name="2Ô∏è‚É£", value=option2, inline=True)
    
    message = await inter.edit_original_response(embed=embed)
    await message.add_reaction("1Ô∏è‚É£")
    await message.add_reaction("2Ô∏è‚É£")

@bot.slash_command()
async def userinfo(inter, member: disnake.Member = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    member = member or inter.author
    
    roles = [role.mention for role in member.roles[1:]]
    embed = disnake.Embed(color=member.color, timestamp=datetime.now())
    embed.set_author(name=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {member}", icon_url=member.display_avatar)
    embed.set_thumbnail(url=member.display_avatar)
    embed.add_field(name="ID", value=member.id)
    embed.add_field(name="–ù–∏–∫–Ω–µ–π–º", value=member.display_name)
    embed.add_field(name="–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω", value=member.created_at.strftime("%d.%m.%Y"))
    embed.add_field(name="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è", value=member.joined_at.strftime("%d.%m.%Y"))
    embed.add_field(name=f"–†–æ–ª–∏ ({len(roles)})", value=" ".join(roles) or "–ù–µ—Ç —Ä–æ–ª–µ–π")
    
    await inter.response.send_message(embed=embed)

@bot.slash_command()
async def serverinfo(inter):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ"""
    guild = inter.guild
    embed = disnake.Embed(title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {guild.name}", color=disnake.Color.blue())
    
    if guild.icon:
        embed.set_thumbnail(url=guild.icon.url)
    
    embed.add_field(name="–í–ª–∞–¥–µ–ª–µ—Ü", value=guild.owner.mention)
    embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=guild.member_count)
    embed.add_field(name="–°–æ–∑–¥–∞–Ω", value=guild.created_at.strftime("%d.%m.%Y"))
    embed.add_field(name="–ö–∞–Ω–∞–ª–æ–≤", value=len(guild.channels))
    embed.add_field(name="–†–æ–ª–µ–π", value=len(guild.roles))
    
    await inter.response.send_message(embed=embed)

@bot.slash_command()
async def random_number(inter, min_value: int = 1, max_value: int = 100):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ"""
    number = random.randint(min_value, max_value)
    await inter.response.send_message(f"üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: **{number}**")

@bot.slash_command()
async def coin(inter):
    """–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É"""
    result = random.choice(["–û—Ä—ë–ª", "–†–µ—à–∫–∞"])
    await inter.response.send_message(f"ü™ô {result}!")

@bot.slash_command()
async def weather(inter, city: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ (–¥–µ–º–æ)"""
    await inter.response.send_message(f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}: +20¬∞C, —Å–æ–ª–Ω–µ—á–Ω–æ\n(–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –∫–æ–º–∞–Ω–¥—ã)")

# –°–∏—Å—Ç–µ–º–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminders = {}

@bot.slash_command()
async def remind(inter, time: int, *, message: str):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö)"""
    try:
        if time < 1 or time > 1440:
            await inter.response.send_message(
                "‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç (24 —á–∞—Å–∞)", 
                ephemeral=True
            )
            return

        reminder_id = len(reminders) + 1
        reminders[reminder_id] = {
            'user_id': inter.author.id,
            'channel_id': inter.channel.id,
            'message': message,
            'time': time,
            'created_at': datetime.now()
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        await inter.response.send_message(
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n"
            f"–í—Ä–µ–º—è: —á–µ—Ä–µ–∑ {time} –º–∏–Ω—É—Ç",
            ephemeral=True
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await asyncio.sleep(time * 60)
        
        try:
            await inter.channel.send(
                f"üîî {inter.author.mention}, –Ω–∞–ø–æ–º–∏–Ω–∞—é (#{reminder_id}):\n{message}"
            )
        finally:
            if reminder_id in reminders:
                del reminders[reminder_id]

    except Exception as e:
        try:
            await inter.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", 
                ephemeral=True
            )
        except:
            pass

@bot.slash_command()
async def cancel_reminder(inter, reminder_id: int):
    """–û—Ç–º–µ–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID"""
    if reminder_id not in reminders or reminders[reminder_id]['user_id'] != inter.author.id:
        return await inter.response.send_message("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", ephemeral=True)
    
    if reminder_id in reminder_tasks:
        reminder_tasks[reminder_id].cancel()
        del reminders[reminder_id]
        del reminder_tasks[reminder_id]
        
    await inter.response.send_message(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} –æ—Ç–º–µ–Ω–µ–Ω–æ", ephemeral=True)

@bot.slash_command()
async def list_reminders(inter):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    user_reminders = {
        rid: rem for rid, rem in reminders.items() 
        if rem['user_id'] == inter.author.id
    }
    
    if not user_reminders:
        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", ephemeral=True)
        return
    
    embed = disnake.Embed(title="üìù –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", color=disnake.Color.blue())
    for rid, rem in user_reminders.items():
        embed.add_field(
            name=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{rid}",
            value=f"–ß–µ—Ä–µ–∑ {rem['time']} –º–∏–Ω: {rem['message']}",
            inline=False
        )
    
    await inter.response.send_message(embed=embed, ephemeral=True)

@bot.slash_command()
async def roll(inter, dice: str = "1d6"):
    """–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ (—Ñ–æ—Ä–º–∞—Ç: NdM, –≥–¥–µ N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å—Ç–µ–π, M - —á–∏—Å–ª–æ –≥—Ä–∞–Ω–µ–π)"""
    await inter.response.defer()
    
    try:
        if 'd' not in dice:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            
        count, sides = map(int, dice.lower().split('d'))
        if count < 1 or sides < 2 or count > 100 or sides > 100:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
        
        results = [random.randint(1, sides) for _ in range(count)]
        total = sum(results)
        
        await inter.edit_original_response(
            content=f"üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—Ä–æ—Å–∫–∞ {dice}:\n"
                   f"–ë—Ä–æ—Å–∫–∏: {', '.join(map(str, results))}\n"
                   f"–°—É–º–º–∞: {total}"
        )
    except ValueError as e:
        await inter.edit_original_response(
            content="‚ùå –û—à–∏–±–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç NdM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2d6), –≥–¥–µ:\n"
                   "N - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Å—Ç–µ–π (1-100)\n"
                   "M - —á–∏—Å–ª–æ –≥—Ä–∞–Ω–µ–π (2-100)"
        )

@bot.slash_command()
async def avatar(inter, member: disnake.Member = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    member = member or inter.author
    embed = disnake.Embed(title=f"–ê–≤–∞—Ç–∞—Ä {member.display_name}", color=member.color)
    embed.set_image(url=member.display_avatar.url)
    await inter.response.send_message(embed=embed)

@bot.slash_command()
async def servericon(inter):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∫–æ–Ω–∫—É —Å–µ—Ä–≤–µ—Ä–∞"""
    if not inter.guild.icon:
        return await inter.response.send_message("–£ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç –∏–∫–æ–Ω–∫–∏!", ephemeral=True)
    
    embed = disnake.Embed(title=f"–ò–∫–æ–Ω–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {inter.guild.name}", color=disnake.Color.blue())
    embed.set_image(url=inter.guild.icon.url)
    await inter.response.send_message(embed=embed)

@bot.slash_command()
async def say(inter, *, text: str):
    """–°–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞"""
    await inter.response.send_message("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", ephemeral=True)
    await inter.channel.send(f'üí¨ {text}')

@bot.slash_command()
async def emoji_info(inter, emoji: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º–æ–¥–∑–∏"""
    try:
        custom_emoji = await commands.EmojiConverter().convert(inter, emoji)
        embed = disnake.Embed(title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–º–æ–¥–∑–∏", color=disnake.Color.blue())
        embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ", value=custom_emoji.name)
        embed.add_field(name="ID", value=custom_emoji.id)
        embed.add_field(name="–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", value="–î–∞" if custom_emoji.animated else "–ù–µ—Ç")
        embed.set_thumbnail(url=custom_emoji.url)
        await inter.response.send_message(embed=embed)
    except:
        await inter.response.send_message("–≠—Ç–æ –Ω–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–º–æ–¥–∑–∏ –∏–ª–∏ —è –Ω–µ –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º", ephemeral=True)

@bot.slash_command()
async def members(inter):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
    guild = inter.guild
    total = guild.member_count
    online = len([m for m in guild.members if m.status != disnake.Status.offline])
    bots = len([m for m in guild.members if m.bot])
    
    embed = disnake.Embed(title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", color=disnake.Color.blue())
    embed.add_field(name="–í—Å–µ–≥–æ", value=total)
    embed.add_field(name="–û–Ω–ª–∞–π–Ω", value=online)
    embed.add_field(name="–ë–æ—Ç–æ–≤", value=bots)
    
    await inter.response.send_message(embed=embed)

# –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–æ–∫
@bot.event
async def on_message(message):
    if message.author.bot:
        return

    await bot.process_commands(message)
    
    # –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    words = message.content.split()
    for word in words:
        try:
            result = urlparse(word)
            if result.scheme and result.netloc:
                async with bot.session.get(word, timeout=5) as response:
                    info = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Å—ã–ª–∫–µ:\n"
                    info += f"–î–æ–º–µ–Ω: {result.netloc}\n"
                    info += f"–ü—Ä–æ—Ç–æ–∫–æ–ª: {result.scheme}\n"
                    info += f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status}\n"
                    info += f"–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {response.headers.get('content-type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
                    
                    await message.reply(info)
                    break
        except:
            continue

    # –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
    guild_id = str(message.guild.id)
    user_id = str(message.author.id)
    
    if guild_id not in levels:
        levels[guild_id] = {}
    
    if user_id not in levels[guild_id]:
        levels[guild_id][user_id] = {"xp": 0, "level": 1}
    
    levels[guild_id][user_id]["xp"] += random.randint(15, 25)
    xp = levels[guild_id][user_id]["xp"]
    lvl = levels[guild_id][user_id]["level"]
    
    xp_required = (lvl * 100)
    
    if xp >= xp_required:
        levels[guild_id][user_id]["level"] += 1
        levels[guild_id][user_id]["xp"] = 0
        await message.channel.send(f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {message.author.mention}! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {lvl + 1} —É—Ä–æ–≤–Ω—è!")
    
    with open('levels.json', 'w') as f:
        json.dump(levels, f)

@bot.slash_command()
async def rank(inter, member: disnake.Member = None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    member = member or inter.author
    guild_id = str(inter.guild.id)
    user_id = str(member.id)
    
    if guild_id not in levels or user_id not in levels[guild_id]:
        return await inter.response.send_message("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–Ω–≥–∞!", ephemeral=True)
    
    level = levels[guild_id][user_id]["level"]
    xp = levels[guild_id][user_id]["xp"]
    xp_required = (level * 100)
    
    embed = disnake.Embed(title=f"–†–∞–Ω–≥ {member.display_name}", color=member.color)
    embed.add_field(name="–£—Ä–æ–≤–µ–Ω—å", value=level)
    embed.add_field(name="XP", value=f"{xp}/{xp_required}")
    embed.set_thumbnail(url=member.display_avatar)
    
    await inter.response.send_message(embed=embed)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.run(os.getenv('DISCORD_TOKEN'))
